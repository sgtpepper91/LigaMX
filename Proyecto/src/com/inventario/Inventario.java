
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inventario;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author hecto
 */
public class Inventario extends javax.swing.JFrame {

    private static LongTaskCargarPantalla task;
    NumberFormat dispFormat = NumberFormat.getCurrencyInstance(new Locale("es", "MX"));
    NumberFormat editFormat = NumberFormat.getNumberInstance(new Locale("es", "MX"));
    NumberFormatter dnFormat = new NumberFormatter(this.dispFormat);
    NumberFormatter enFormat = new NumberFormatter(this.editFormat);
    DefaultFormatterFactory currFactory = new DefaultFormatterFactory(this.dnFormat, this.dnFormat, this.enFormat);
    ServiceInventario service = new ServiceInventario(this);
    private int buscar;
    final JDialog buscarCliente = new JDialog(this, "Buscar cliente", true);
    final JDialog nuevoCliente = new JDialog(this, "Nuevo cliente", true);
    final JDialog nuevoProducto = new JDialog(this, "Nuevo", true);
    boolean editProducto = false;
    private static final org.apache.logging.log4j.Logger LOGGER = LogManager.getLogger();
    private boolean inicio = true;

    /**
     * Creates new form NewJFrame
     *
     * @param task
     */
    public Inventario(LongTaskCargarPantalla task) {
        LOGGER.info(Constantes.ABRIENDO_APLICACION);
        initComponents();
        Inventario.task = task;
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("logo.png"));

        return retValue;
    }

    public JTable getTbClientes() {
        return tbClientes;
    }

    public JTable getTbInventario() {
        return tbInventario;
    }

    public JTable getTbVenta() {
        return tbVenta;
    }

    public JFormattedTextField getTxtTotalDeudas() {
        return txtTotalDeudas;
    }

    public JFormattedTextField getTxtTotalVentas() {
        return txtTotalVentas;
    }

    public JTextField getTxtClienteVentas() {
        return txtClienteVentas;
    }

    public JTable getTbHistorial() {
        return tbHistorial;
    }

    public JFormattedTextField getTxtTotalCliente() {
        return txtTotalCliente;
    }

    public JFormattedTextField getTxtTotalInventario() {
        return txtTotalInventario;
    }

    public JComboBox<String> getCbCategoria() {
        return cbCategoria;
    }
    
    public JComboBox<String> getCbCategoriaProducto() {
        return cbCategoriaProducto;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panBuscarCliente = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaClientes = new javax.swing.JList<>();
        panNuevoProducto = new javax.swing.JPanel();
        btnAceptarNuevoProd = new javax.swing.JButton();
        lblDescripcionProd = new javax.swing.JLabel();
        txtDescripcionProd = new javax.swing.JTextField();
        lblCantidadProd = new javax.swing.JLabel();
        lblCostoProd = new javax.swing.JLabel();
        lblPrecioProd = new javax.swing.JLabel();
        jcCantidadProd = new javax.swing.JComboBox<>();
        txtCostoProd = new javax.swing.JFormattedTextField();
        txtPrecioProd = new javax.swing.JFormattedTextField();
        lblCategoria = new javax.swing.JLabel();
        cbCategoria = new javax.swing.JComboBox<>();
        panNuevoCliente = new javax.swing.JPanel();
        lblNombreCliente = new javax.swing.JLabel();
        lblSaldoNuevo = new javax.swing.JLabel();
        txtSaldoNuevo = new javax.swing.JFormattedTextField();
        txtNuevoCliente = new javax.swing.JTextField();
        btnAceptarNuevoCliente = new javax.swing.JButton();
        panPestañas = new javax.swing.JTabbedPane();
        panVentas = new javax.swing.JPanel();
        lblClienteVentas = new javax.swing.JLabel();
        txtClienteVentas = new javax.swing.JTextField();
        btnBuscarVentas = new javax.swing.JButton();
        lblFechaVentas = new javax.swing.JLabel();
        fechaVentas = new com.toedter.calendar.JDateChooser();
        scrollTablaVentas = new javax.swing.JScrollPane();
        tbVenta = new javax.swing.JTable();
        btnBorrarVenta = new javax.swing.JButton();
        btnAceptarVenta = new javax.swing.JButton();
        lblAjuste = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtAjuste = new javax.swing.JFormattedTextField();
        txtTotal = new javax.swing.JFormattedTextField();
        panPagos = new javax.swing.JPanel();
        lblClientePagos = new javax.swing.JLabel();
        txtClientePagos = new javax.swing.JTextField();
        btnBuscarPagos = new javax.swing.JButton();
        lblFechaPagos = new javax.swing.JLabel();
        fechaPagos = new com.toedter.calendar.JDateChooser();
        lblAbono = new javax.swing.JLabel();
        txtAbono = new javax.swing.JFormattedTextField();
        btnAceptarPagos = new javax.swing.JButton();
        panProductos = new javax.swing.JPanel();
        scrollTablaInventario = new javax.swing.JScrollPane();
        tbInventario = new javax.swing.JTable();
        txtTotalInventario = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        cbCategoriaProducto = new javax.swing.JComboBox<>();
        btnBuscarCategoria = new javax.swing.JButton();
        panDevoluciones = new javax.swing.JPanel();
        lblClienteDevoluciones = new javax.swing.JLabel();
        txtClienteDevoluciones = new javax.swing.JTextField();
        btnBuscarDevoluciones = new javax.swing.JButton();
        scrollTablaHistorial1 = new javax.swing.JScrollPane();
        tbDevoluciones = new javax.swing.JTable();
        panClientes = new javax.swing.JPanel();
        scrollTablaClientes = new javax.swing.JScrollPane();
        tbClientes = new javax.swing.JTable();
        lblTotalVentas = new javax.swing.JLabel();
        lblTotalDeudas = new javax.swing.JLabel();
        txtTotalDeudas = new javax.swing.JFormattedTextField();
        txtTotalVentas = new javax.swing.JFormattedTextField();
        panHistorial = new javax.swing.JPanel();
        scrollTablaHistorial = new javax.swing.JScrollPane();
        tbHistorial = new javax.swing.JTable();
        txtClienteHistorial = new javax.swing.JTextField();
        btnBuscarHistorial = new javax.swing.JButton();
        lblClienteHistorial = new javax.swing.JLabel();
        lblSaldoCliente = new javax.swing.JLabel();
        txtTotalCliente = new javax.swing.JFormattedTextField();
        lblFechaCorte = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        mNuevoProducto = new javax.swing.JMenuItem();
        mNuevoCliente = new javax.swing.JMenuItem();
        mEditarCliente = new javax.swing.JMenuItem();
        mBorrarCliente = new javax.swing.JMenuItem();
        mNuevaCategoria = new javax.swing.JMenuItem();
        mSalir = new javax.swing.JMenuItem();
        menuAjustes = new javax.swing.JMenu();
        mFechaCorte = new javax.swing.JMenuItem();
        mRespaldo = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        mAcerca = new javax.swing.JMenuItem();

        listaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaClientes);

        javax.swing.GroupLayout panBuscarClienteLayout = new javax.swing.GroupLayout(panBuscarCliente);
        panBuscarCliente.setLayout(panBuscarClienteLayout);
        panBuscarClienteLayout.setHorizontalGroup(
            panBuscarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        panBuscarClienteLayout.setVerticalGroup(
            panBuscarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        btnAceptarNuevoProd.setText("Aceptar");
        btnAceptarNuevoProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarNuevoProdActionPerformed(evt);
            }
        });

        lblDescripcionProd.setText("Descripción");

        lblCantidadProd.setText("Cantidad");

        lblCostoProd.setText("Costo");

        lblPrecioProd.setText("Precio");

        jcCantidadProd.setModel(new DefaultComboBoxModel(new String[]{}));

        txtCostoProd.setValue(0);

        txtPrecioProd.setValue(0);

        lblCategoria.setText("Categoría");

        javax.swing.GroupLayout panNuevoProductoLayout = new javax.swing.GroupLayout(panNuevoProducto);
        panNuevoProducto.setLayout(panNuevoProductoLayout);
        panNuevoProductoLayout.setHorizontalGroup(
            panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panNuevoProductoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptarNuevoProd)
                .addGap(94, 94, 94))
            .addGroup(panNuevoProductoLayout.createSequentialGroup()
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panNuevoProductoLayout.createSequentialGroup()
                        .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescripcionProd)
                            .addComponent(lblCantidadProd)
                            .addComponent(lblCostoProd)
                            .addComponent(lblPrecioProd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescripcionProd, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jcCantidadProd, javax.swing.GroupLayout.Alignment.LEADING, 0, 70, Short.MAX_VALUE)
                                .addComponent(txtPrecioProd, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCostoProd, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panNuevoProductoLayout.createSequentialGroup()
                        .addComponent(lblCategoria)
                        .addGap(18, 18, 18)
                        .addComponent(cbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(8, 8, 8))
        );
        panNuevoProductoLayout.setVerticalGroup(
            panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panNuevoProductoLayout.createSequentialGroup()
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescripcionProd)
                    .addComponent(txtDescripcionProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCantidadProd)
                    .addComponent(jcCantidadProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCostoProd)
                    .addComponent(txtCostoProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecioProd)
                    .addComponent(txtPrecioProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panNuevoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategoria)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(btnAceptarNuevoProd))
        );

        lblNombreCliente.setText("Nombre");

        lblSaldoNuevo.setText("Saldo");

        txtSaldoNuevo.setValue(0);
        txtSaldoNuevo.setHorizontalAlignment(0);
        txtSaldoNuevo.setFocusCycleRoot(true);
        txtSaldoNuevo.setFormatterFactory(this.currFactory);

        btnAceptarNuevoCliente.setText("Aceptar");
        btnAceptarNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarNuevoClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panNuevoClienteLayout = new javax.swing.GroupLayout(panNuevoCliente);
        panNuevoCliente.setLayout(panNuevoClienteLayout);
        panNuevoClienteLayout.setHorizontalGroup(
            panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panNuevoClienteLayout.createSequentialGroup()
                .addGroup(panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombreCliente)
                    .addComponent(lblSaldoNuevo))
                .addGap(18, 18, 18)
                .addGroup(panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSaldoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNuevoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panNuevoClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptarNuevoCliente)
                .addGap(101, 101, 101))
        );
        panNuevoClienteLayout.setVerticalGroup(
            panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panNuevoClienteLayout.createSequentialGroup()
                .addGroup(panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreCliente)
                    .addComponent(txtNuevoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panNuevoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoNuevo)
                    .addComponent(txtSaldoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAceptarNuevoCliente)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventario");
        setIconImage(getIconImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panPestañas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panPestañas.setToolTipText("");

        lblClienteVentas.setText("Cliente");

        btnBuscarVentas.setText("Buscar");
        btnBuscarVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });

        lblFechaVentas.setText("Fecha");

        fechaVentas.setDate(new Date());
        fechaVentas.setDateFormatString("dd/MM/yyyy");
        fechaVentas.setMaxSelectableDate(new Date());

        tbVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cantidad", "Producto", "Precio", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbVenta.getTableHeader().setReorderingAllowed(false);
        tbVenta.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbVentaPropertyChange(evt);
            }
        });
        scrollTablaVentas.setViewportView(tbVenta);
        String[] cant = {"", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50"};
        TableColumn col0 = this.tbVenta.getColumnModel().getColumn(0);
        JComboBox jcCantidad = new JComboBox(cant);
        col0.setCellEditor(new DefaultCellEditor(jcCantidad));
        try{
            service.llenarProductos();
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        if (tbVenta.getColumnModel().getColumnCount() > 0) {
            tbVenta.getColumnModel().getColumn(0).setResizable(false);
            tbVenta.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbVenta.getColumnModel().getColumn(1).setResizable(false);
            tbVenta.getColumnModel().getColumn(1).setPreferredWidth(200);
            tbVenta.getColumnModel().getColumn(2).setResizable(false);
            tbVenta.getColumnModel().getColumn(2).setPreferredWidth(11);
            tbVenta.getColumnModel().getColumn(3).setResizable(false);
            tbVenta.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        btnBorrarVenta.setText("Borrar");
        btnBorrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarVentaActionPerformed(evt);
            }
        });

        btnAceptarVenta.setText("Aceptar");
        btnAceptarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarVentaActionPerformed(evt);
            }
        });

        lblAjuste.setText("Ajuste");

        lblTotal.setText("Total");

        txtAjuste.setColumns(4);
        txtAjuste.setValue(0);
        txtAjuste.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtAjustePropertyChange(evt);
            }
        });

        txtTotal.setEditable(false);

        javax.swing.GroupLayout panVentasLayout = new javax.swing.GroupLayout(panVentas);
        panVentas.setLayout(panVentasLayout);
        panVentasLayout.setHorizontalGroup(
            panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panVentasLayout.createSequentialGroup()
                .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panVentasLayout.createSequentialGroup()
                        .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panVentasLayout.createSequentialGroup()
                                .addComponent(lblClienteVentas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtClienteVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(136, 136, 136)
                                .addComponent(btnBuscarVentas))
                            .addGroup(panVentasLayout.createSequentialGroup()
                                .addComponent(lblFechaVentas)
                                .addGap(18, 18, 18)
                                .addComponent(fechaVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panVentasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panVentasLayout.createSequentialGroup()
                                .addComponent(btnBorrarVenta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAceptarVenta)
                                .addGap(70, 70, 70)
                                .addComponent(lblTotal))
                            .addComponent(lblAjuste))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(txtAjuste))))
                .addContainerGap())
            .addComponent(scrollTablaVentas)
        );
        panVentasLayout.setVerticalGroup(
            panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panVentasLayout.createSequentialGroup()
                .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClienteVentas)
                    .addComponent(txtClienteVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarVentas))
                .addGap(9, 9, 9)
                .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFechaVentas)
                    .addComponent(fechaVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAjuste)
                    .addComponent(txtAjuste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(panVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptarVenta)
                    .addComponent(btnBorrarVenta)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtAjuste.setHorizontalAlignment(0);
        txtAjuste.setFocusCycleRoot(true);
        txtAjuste.setValue(0);
        txtAjuste.setFormatterFactory(this.currFactory);
        txtTotal.setHorizontalAlignment(0);
        txtTotal.setFocusCycleRoot(true);
        txtTotal.setValue(0);
        txtTotal.setFormatterFactory(this.currFactory);

        panPestañas.addTab("Ventas", panVentas);

        lblClientePagos.setText("Cliente");

        btnBuscarPagos.setText("Buscar");
        btnBuscarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });

        lblFechaPagos.setText("Fecha");

        fechaPagos.setDate(new Date());
        fechaPagos.setDateFormatString("dd/MM/yyyy");
        fechaPagos.setMaxSelectableDate(new Date());

        lblAbono.setText("Abono");

        btnAceptarPagos.setText("Aceptar");
        btnAceptarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarPagosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panPagosLayout = new javax.swing.GroupLayout(panPagos);
        panPagos.setLayout(panPagosLayout);
        panPagosLayout.setHorizontalGroup(
            panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPagosLayout.createSequentialGroup()
                .addGroup(panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPagosLayout.createSequentialGroup()
                        .addComponent(lblClientePagos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtClientePagos, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135)
                        .addComponent(btnBuscarPagos))
                    .addGroup(panPagosLayout.createSequentialGroup()
                        .addComponent(lblFechaPagos)
                        .addGap(18, 18, 18)
                        .addComponent(fechaPagos, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panPagosLayout.createSequentialGroup()
                        .addComponent(lblAbono)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAbono, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panPagosLayout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(btnAceptarPagos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panPagosLayout.setVerticalGroup(
            panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPagosLayout.createSequentialGroup()
                .addGroup(panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientePagos)
                    .addComponent(txtClientePagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPagos))
                .addGap(9, 9, 9)
                .addGroup(panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFechaPagos)
                    .addComponent(fechaPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAbono)
                    .addComponent(txtAbono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAceptarPagos)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        txtAbono.setFormatterFactory(this.currFactory);
        txtAbono.setHorizontalAlignment(0);
        txtAbono.setFocusCycleRoot(true);
        txtAbono.setValue(0);

        panPestañas.addTab("Pagos", panPagos);

        tbInventario.setAutoCreateRowSorter(true);
        tbInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Existencias", "Costo", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbInventario.setColumnSelectionAllowed(true);
        tbInventario.getTableHeader().setReorderingAllowed(false);
        tbInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbInventarioMouseClicked(evt);
            }
        });
        scrollTablaInventario.setViewportView(tbInventario);
        tbInventario.getTableHeader().setReorderingAllowed(false);
        tbInventario.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbInventario.getColumnModel().getColumnCount() > 0) {
            tbInventario.getColumnModel().getColumn(0).setResizable(false);
            tbInventario.getColumnModel().getColumn(0).setPreferredWidth(150);
            tbInventario.getColumnModel().getColumn(1).setResizable(false);
            tbInventario.getColumnModel().getColumn(1).setPreferredWidth(30);
            tbInventario.getColumnModel().getColumn(2).setResizable(false);
            tbInventario.getColumnModel().getColumn(2).setPreferredWidth(10);
            tbInventario.getColumnModel().getColumn(3).setResizable(false);
            tbInventario.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        txtTotalInventario.setEditable(false);

        jLabel1.setText("Categoría:");

        btnBuscarCategoria.setText("Buscar");
        btnBuscarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panProductosLayout = new javax.swing.GroupLayout(panProductos);
        panProductos.setLayout(panProductosLayout);
        panProductosLayout.setHorizontalGroup(
            panProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTablaInventario, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
            .addGroup(panProductosLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtTotalInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panProductosLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbCategoriaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBuscarCategoria)
                .addContainerGap())
        );
        panProductosLayout.setVerticalGroup(
            panProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panProductosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbCategoriaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarCategoria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaInventario, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtTotalInventario.setHorizontalAlignment(0);
        txtTotalInventario.setFocusCycleRoot(true);
        txtTotalInventario.setValue(0);
        txtTotalInventario.setFormatterFactory(this.currFactory);

        panPestañas.addTab("Productos", panProductos);

        lblClienteDevoluciones.setText("Cliente");

        btnBuscarDevoluciones.setText("Buscar");
        btnBuscarDevoluciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });

        tbDevoluciones.setAutoCreateRowSorter(true);
        tbDevoluciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cantidad", "Descripción", "Total", "Fecha", "NumVenta", "ClaveProd"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.util.Date.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDevoluciones.setColumnSelectionAllowed(true);
        tbDevoluciones.getTableHeader().setReorderingAllowed(false);
        tbDevoluciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDevolucionesMouseClicked(evt);
            }
        });
        scrollTablaHistorial1.setViewportView(tbDevoluciones);
        tbDevoluciones.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbDevoluciones.getColumnModel().getColumnCount() > 0) {
            tbDevoluciones.getColumnModel().getColumn(0).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbDevoluciones.getColumnModel().getColumn(1).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            tbDevoluciones.getColumnModel().getColumn(2).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(2).setPreferredWidth(10);
            tbDevoluciones.getColumnModel().getColumn(3).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(3).setPreferredWidth(40);
            tbDevoluciones.getColumnModel().getColumn(4).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(4).setPreferredWidth(0);
            tbDevoluciones.getColumnModel().getColumn(5).setResizable(false);
            tbDevoluciones.getColumnModel().getColumn(5).setPreferredWidth(0);
        }
        tbDevoluciones.removeColumn(tbDevoluciones.getColumnModel().getColumn(4));
        tbDevoluciones.removeColumn(tbDevoluciones.getColumnModel().getColumn(4));
        tbDevoluciones.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer(){
            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");

            public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
                if( value instanceof Date) {
                    value = f.format(value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
            }
        }) ;

        javax.swing.GroupLayout panDevolucionesLayout = new javax.swing.GroupLayout(panDevoluciones);
        panDevoluciones.setLayout(panDevolucionesLayout);
        panDevolucionesLayout.setHorizontalGroup(
            panDevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDevolucionesLayout.createSequentialGroup()
                .addComponent(lblClienteDevoluciones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtClienteDevoluciones, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136)
                .addComponent(btnBuscarDevoluciones)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panDevolucionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTablaHistorial1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        panDevolucionesLayout.setVerticalGroup(
            panDevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panDevolucionesLayout.createSequentialGroup()
                .addGroup(panDevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClienteDevoluciones)
                    .addComponent(txtClienteDevoluciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarDevoluciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollTablaHistorial1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
        );

        panPestañas.addTab("Devoluciones", panDevoluciones);

        tbClientes.setAutoCreateRowSorter(true);
        tbClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbClientes.setColumnSelectionAllowed(true);
        tbClientes.getTableHeader().setReorderingAllowed(false);
        tbClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClientesMouseClicked(evt);
            }
        });
        scrollTablaClientes.setViewportView(tbClientes);
        tbClientes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbClientes.getColumnModel().getColumnCount() > 0) {
            tbClientes.getColumnModel().getColumn(0).setResizable(false);
            tbClientes.getColumnModel().getColumn(1).setResizable(false);
            tbClientes.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        javax.swing.GroupLayout panClientesLayout = new javax.swing.GroupLayout(panClientes);
        panClientes.setLayout(panClientesLayout);
        panClientesLayout.setHorizontalGroup(
            panClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTablaClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        );
        panClientesLayout.setVerticalGroup(
            panClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panClientesLayout.createSequentialGroup()
                .addComponent(scrollTablaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panPestañas.addTab("Clientes", panClientes);

        lblTotalVentas.setText("Total Ventas");

        lblTotalDeudas.setText("Total Deudas");

        txtTotalDeudas.setEditable(false);

        txtTotalVentas.setEditable(false);

        panHistorial.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tbHistorial.setAutoCreateRowSorter(true);
        tbHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cantidad", "Descripción", "Total", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.util.Date.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbHistorial.setColumnSelectionAllowed(true);
        tbHistorial.getTableHeader().setReorderingAllowed(false);
        scrollTablaHistorial.setViewportView(tbHistorial);
        tbHistorial.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbHistorial.getColumnModel().getColumnCount() > 0) {
            tbHistorial.getColumnModel().getColumn(0).setResizable(false);
            tbHistorial.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbHistorial.getColumnModel().getColumn(1).setResizable(false);
            tbHistorial.getColumnModel().getColumn(1).setPreferredWidth(150);
            tbHistorial.getColumnModel().getColumn(2).setResizable(false);
            tbHistorial.getColumnModel().getColumn(2).setPreferredWidth(10);
            tbHistorial.getColumnModel().getColumn(3).setResizable(false);
            tbHistorial.getColumnModel().getColumn(3).setPreferredWidth(40);
        }
        tbHistorial.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer(){
            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");

            public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
                if( value instanceof Date) {
                    value = f.format(value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
            }
        }) ;

        btnBuscarHistorial.setText("Buscar");
        btnBuscarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });

        lblClienteHistorial.setText("Cliente");

        lblSaldoCliente.setText("Saldo");

        txtTotalCliente.setEditable(false);

        javax.swing.GroupLayout panHistorialLayout = new javax.swing.GroupLayout(panHistorial);
        panHistorial.setLayout(panHistorialLayout);
        panHistorialLayout.setHorizontalGroup(
            panHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHistorialLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblClienteHistorial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtClienteHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBuscarHistorial)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panHistorialLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollTablaHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panHistorialLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(lblSaldoCliente)
                .addGap(18, 18, 18)
                .addComponent(txtTotalCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panHistorialLayout.setVerticalGroup(
            panHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panHistorialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClienteHistorial)
                    .addComponent(txtClienteHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarHistorial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTablaHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoCliente)
                    .addComponent(txtTotalCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        txtTotalCliente.setHorizontalAlignment(0);
        txtTotalCliente.setFocusCycleRoot(true);
        txtTotalCliente.setValue(0);
        txtTotalCliente.setFormatterFactory(this.currFactory);

        lblFechaCorte.setText("desde: " + service.getFechaCorte());

        menuArchivo.setText("Archivo");

        mNuevoProducto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        mNuevoProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nuevoProd.png"))); // NOI18N
        mNuevoProducto.setText("Nuevo Producto");
        mNuevoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNuevoProductoActionPerformed(evt);
            }
        });
        menuArchivo.add(mNuevoProducto);

        mNuevoCliente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        mNuevoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Add-Male-User-icon.png"))); // NOI18N
        mNuevoCliente.setText("Nuevo Cliente");
        mNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNuevoClienteActionPerformed(evt);
            }
        });
        menuArchivo.add(mNuevoCliente);

        mEditarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Edit-Male-User-icon.png"))); // NOI18N
        mEditarCliente.setText("Editar Cliente");
        mEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });
        menuArchivo.add(mEditarCliente);

        mBorrarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete-user-icon-33724.png"))); // NOI18N
        mBorrarCliente.setText("Borrar Cliente");
        mBorrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });
        menuArchivo.add(mBorrarCliente);

        mNuevaCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Package-Add-icon.png"))); // NOI18N
        mNuevaCategoria.setText("Nueva Categoría");
        mNuevaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNuevaCategoriaActionPerformed(evt);
            }
        });
        menuArchivo.add(mNuevaCategoria);

        mSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salir.png"))); // NOI18N
        mSalir.setText("Salir");
        mSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(mSalir);

        barraMenu.add(menuArchivo);

        menuAjustes.setText("Ajustes");
        menuAjustes.setToolTipText("");

        mFechaCorte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calendar.png"))); // NOI18N
        mFechaCorte.setText("Fecha corte");
        mFechaCorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFechaCorteActionPerformed(evt);
            }
        });
        menuAjustes.add(mFechaCorte);

        mRespaldo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download-database.png"))); // NOI18N
        mRespaldo.setText("Respaldo");
        mRespaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRespaldoActionPerformed(evt);
            }
        });
        menuAjustes.add(mRespaldo);

        barraMenu.add(menuAjustes);

        menuAyuda.setText("Ayuda");

        mAcerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/about.png"))); // NOI18N
        mAcerca.setText("Acerca de");
        mAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAcercaActionPerformed(evt);
            }
        });
        menuAyuda.add(mAcerca);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(lblTotalVentas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblFechaCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotalDeudas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalDeudas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
            .addGroup(layout.createSequentialGroup()
                .addComponent(panPestañas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panHistorial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panPestañas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalDeudas)
                    .addComponent(txtTotalDeudas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalVentas)
                    .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFechaCorte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        txtTotalDeudas.setHorizontalAlignment(0);
        txtTotalDeudas.setFocusCycleRoot(true);
        txtTotalDeudas.setValue(0);
        txtTotalDeudas.setFormatterFactory(this.currFactory);
        txtTotalVentas.setHorizontalAlignment(0);
        txtTotalVentas.setFocusCycleRoot(true);
        txtTotalVentas.setValue(0);
        txtTotalVentas.setFormatterFactory(this.currFactory);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cierra la aplicaciÃ³n
     *
     * @param evt
     */
    private void mSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSalirActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_mSalirActionPerformed

    /**
     * Evento cuando se hace un cambio en la tabla Venta
     *
     * @param evt
     */
    private void tbVentaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbVentaPropertyChange
        CalcularVenta();
    }//GEN-LAST:event_tbVentaPropertyChange

    /**
     * Evento al hacer click en el botÃ³n borrar venta
     *
     * @param evt
     */
    private void btnBorrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarVentaActionPerformed
        BorrarVentas();
    }//GEN-LAST:event_btnBorrarVentaActionPerformed

    /**
     * BotÃ³n aceptar venta
     *
     * @param evt
     */
    private void btnAceptarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarVentaActionPerformed
        CalcularVenta();
        float total = Float.parseFloat(txtTotal.getValue().toString());
        BigDecimal ajuste = new BigDecimal(txtAjuste.getValue().toString());
        String nombre = txtClienteVentas.getText();
        StringBuilder builder = new StringBuilder();
        Date fechaVenta = fechaVentas.getDate();
        if (nombre.isEmpty()) {
            builder.append("No se ha seleccionado cliente\n");
        }
        if (total == 0) {
            builder.append("No se han añadido productos\n");
        }
        if (builder.length() != 0) {
            JOptionPane.showMessageDialog(this, builder, "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int opcion = JOptionPane.showConfirmDialog(this, "Desea agregar a " + nombre + " la cantidad de $" + total + "", "Aceptar venta",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == JOptionPane.YES_OPTION) {
                try {
                    btnAceptarVenta.setEnabled(false);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    Cliente cliente = new Cliente();
                    cliente.RecuperarCliente(nombre);
                    Venta venta = new Venta(cliente, fechaVenta, (int) total);
                    if (venta.insertarVenta()) {
                        for (int contador = 0; contador < tbVenta.getRowCount(); contador++) {
                            if ((this.tbVenta.getValueAt(contador, 0) != null) && (this.tbVenta.getValueAt(contador, 1) != null)) {
                                int cantidad = Integer.parseInt(this.tbVenta.getValueAt(contador, 0).toString());
                                Producto producto = new Producto();
                                producto.RecuperarProducto(this.tbVenta.getValueAt(contador, 1).toString());
                                DetalleVenta detalle = new DetalleVenta(venta.getNumVenta(), producto, cantidad);
                                if (!detalle.InsertarDetalleVenta()) {
                                    JOptionPane.showMessageDialog(this, "Error al insertar detalle de venta", null, JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        if (BigDecimal.ZERO.compareTo(ajuste) < 0) {
                            Producto productoAjuste = new Producto();
                            productoAjuste.RecuperarProducto("ajuste");
                            productoAjuste.setCostoUnitario(ajuste);
                            productoAjuste.setPrecioUnitario(ajuste);
                            DetalleVenta detalle = new DetalleVenta(venta.getNumVenta(), productoAjuste, 1);
                            detalle.InsertarDetalleVenta();
                        }
                        if (cliente.ActualizarAcumulado((int) (total))) {
                            JOptionPane.showMessageDialog(this, "Venta insertada", null, JOptionPane.INFORMATION_MESSAGE);
                            BorrarVentas();
                            txtClientePagos.setText(cliente.getNombreCliente());
                            txtClienteHistorial.setText(cliente.getNombreCliente());
                            llenarHistorial(cliente.getNombreCliente());
                            service.llenarInventario();
                            llenarClientes();
                        } else {
                            JOptionPane.showMessageDialog(this, "Error al actualizar acumulado", null, JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al insertar venta", null, JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Excepcion ex) {
                    LOGGER.error(ex.getMessage());
                    JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                } finally {
                    btnAceptarVenta.setEnabled(true);
                    this.setCursor(Cursor.getDefaultCursor());
                }
            }
        }
    }//GEN-LAST:event_btnAceptarVentaActionPerformed

    /**
     * Evento al escribir en el campo Ajuste
     *
     * @param evt
     */
    private void txtAjustePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtAjustePropertyChange
        CalcularVenta();
    }//GEN-LAST:event_txtAjustePropertyChange

    /**
     * Evento al hacer click en el botÃ³n Buscar
     *
     * @param evt
     */
    private void btnBuscarVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVentasActionPerformed
        try {
            if (evt.getSource() == btnBuscarVentas) {
                buscar = 0;
            } else if (evt.getSource() == btnBuscarPagos) {
                buscar = 1;
            } else if (evt.getSource() == this.btnBuscarHistorial) {
                buscar = 2;
            } else if (evt.getSource() == this.mEditarCliente) {
                this.buscar = 3;
            } else if (evt.getSource() == this.btnBuscarDevoluciones) {
                this.buscar = 4;
            } else if (evt.getSource() == this.mBorrarCliente) {
                this.buscar = 5;
            }

            Cliente cliente = new Cliente();
            DefaultListModel<String> listModel = cliente.getListaClientes();
            listaClientes.setModel(listModel);
            buscarCliente.setVisible(true);
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(Inventario.this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnBuscarVentasActionPerformed

    /**
     * Evento al hacer click en un cliente de la lista
     *
     * @param evt
     */
    private void listaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaClientesMouseClicked
        if (evt.getClickCount() == 2) {
            String cliente = listaClientes.getSelectedValue();
            switch (buscar) {
                case 0:
                    txtClienteVentas.setText(cliente);
                    break;
                case 1:
                    txtClientePagos.setText(cliente);
                    break;
                case 2:
                    txtClienteHistorial.setText(cliente);
                    llenarHistorial(cliente);
                    break;
                case 3:
                    String cnuevo = JOptionPane.showInputDialog(buscarCliente, "Inserte el nuevo nombre para: " + cliente, cliente);
                    if (!cnuevo.isEmpty()) {
                        try {
                            Cliente clienteMod = new Cliente();
                            clienteMod.RecuperarCliente(cliente);
                            clienteMod.EditarCliente(cnuevo);
                            llenarClientes();
                        } catch (Exception ex) {
                            LOGGER.error(ex.getMessage());
                            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(buscarCliente, "No se ha insertado nombre", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                case 4:
                    txtClienteDevoluciones.setText(cliente);
                    llenarDevolucion(cliente);
                    break;
                case 5:
                    int opcion = JOptionPane.showConfirmDialog(this, "¿Desea eliminar a " + cliente + "?", "Borrar cliente",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (opcion == JOptionPane.YES_OPTION) {
                        try {
                            Cliente clienteBorrar = new Cliente();
                            clienteBorrar.RecuperarCliente(cliente);
                            if (clienteBorrar.BorrarCliente()) {
                                JOptionPane.showMessageDialog(this, "Cliente borrado", null, JOptionPane.INFORMATION_MESSAGE);
                                llenarClientes();
                            }
                        } catch (Excepcion | HeadlessException ex) {
                            LOGGER.error(ex.getMessage());
                            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                        }
                    }
            }
            buscarCliente.setVisible(false);
        }


    }//GEN-LAST:event_listaClientesMouseClicked

    /**
     * Evento al hacer click en un cliente de la tabla Clientes
     *
     * @param evt
     */
    private void tbClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClientesMouseClicked
        if (evt.getClickCount() == 2) {
            String cliente = tbClientes.getValueAt(tbClientes.getSelectedRow(), 0).toString();
            txtClienteVentas.setText(cliente);
            txtClientePagos.setText(cliente);
            txtClienteDevoluciones.setText(cliente);
            txtClienteHistorial.setText(cliente);
            llenarHistorial(cliente);
        }
    }//GEN-LAST:event_tbClientesMouseClicked

    /**
     * Evento al hacer click en el menÃº de nuevo producto
     *
     * @param evt
     */
    private void mNuevoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mNuevoProductoActionPerformed
        try {
            nuevoProducto.getContentPane().add(panNuevoProducto);
            nuevoProducto.pack();
            nuevoProducto.setLocationRelativeTo(this);
            editProducto = false;
            txtDescripcionProd.setEditable(true);
            txtDescripcionProd.setText("");
            jcCantidadProd.setSelectedIndex(-1);
            txtCostoProd.setValue(0);
            txtPrecioProd.setValue(0);
            service.llenarCategorias(this.cbCategoria, false);
            nuevoProducto.setVisible(true);
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mNuevoProductoActionPerformed

    /**
     * Evento al hacer click en el menÃº de nuevo cliente
     *
     * @param evt
     */
    private void mNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mNuevoClienteActionPerformed
        nuevoCliente.add(panNuevoCliente);
        nuevoCliente.pack();
        nuevoCliente.setLocationRelativeTo(this);
        nuevoCliente.setVisible(true);
    }//GEN-LAST:event_mNuevoClienteActionPerformed

    /**
     * Evento al hacer click en el botÃ³n aceptar nuevo cliente
     *
     * @param evt
     */
    private void btnAceptarNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarNuevoClienteActionPerformed
        String nombreCliente = this.txtNuevoCliente.getText();
        float saldoCliente = Float.parseFloat(this.txtSaldoNuevo.getValue().toString());
        String error;
        if (nombreCliente.isEmpty()) {
            error = "No se ha insertado nombre del cliente";
            JOptionPane.showMessageDialog(nuevoCliente, error, "Error", 0);
        } else {
            try {
                Cliente cliente = new Cliente(nombreCliente, (int) saldoCliente);
                if (cliente.InsertarCliente()) {
                    txtNuevoCliente.setText(null);
                    txtSaldoNuevo.setValue(0);
                    nuevoCliente.setVisible(false);
                    service.llenarClientes();
                    JOptionPane.showMessageDialog(this, "Cliente insertado", null, JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al insertar cliente", null, JOptionPane.ERROR_MESSAGE);
                }
            } catch (Excepcion | HeadlessException ex) {
                LOGGER.error(ex.getMessage());
                JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAceptarNuevoClienteActionPerformed

    /**
     * Evento al hacer click en el botÃ³n aceptar nuevo producto
     *
     * @param evt
     */
    private void btnAceptarNuevoProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarNuevoProdActionPerformed
        try {
            String descProd = txtDescripcionProd.getText();
            int existProd = Integer.parseInt(this.jcCantidadProd.getSelectedItem().toString());
            BigDecimal costoProd = new BigDecimal(this.txtCostoProd.getValue().toString());
            BigDecimal precioProd = new BigDecimal(this.txtPrecioProd.getValue().toString());
            String descCategoria = this.cbCategoria.getSelectedItem().toString();
            Categoria categoria = new Categoria(descCategoria);
            StringBuilder builder = new StringBuilder();
            if (descProd.isEmpty()) {
                builder.append("No se ha insertado descripción\n");
            }
            if (BigDecimal.ZERO.compareTo(costoProd) < 0) {
                builder.append("No se ha insertado costo de producto\n");
            }
            if (BigDecimal.ZERO.equals(precioProd)) {
                builder.append("No se ha insertado precio de producto\n");
            }
            if (builder.length() != 0) {
                JOptionPane.showMessageDialog(nuevoProducto, builder, "Error", 0);
            } else {

                Producto producto = new Producto();
                if (editProducto) {
                    producto = producto.RecuperarProducto(descripcionProdOld);
                    producto.setDescripcionProd(descProd);
                    producto.setCostoUnitario(costoProd);
                    producto.setExistencias(existProd);
                    producto.setPrecioUnitario(precioProd);
                    producto.setCategoria(categoria.getId());
                    if (producto.actualizar()) {
                        JOptionPane.showMessageDialog(this, "Producto actualizado", null, JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al actualizar producto", null, JOptionPane.ERROR_MESSAGE);
                    }
                    nuevoProducto.setVisible(false);
                    this.setEnabled(true);
                    service.llenarProductos();
                    service.llenarInventario();

                } else {
                    producto = new Producto(descProd, existProd, costoProd, precioProd, categoria.getId());
                    if (producto.InsertarProducto()) {
                        txtDescripcionProd.setText(null);
                        jcCantidadProd.setSelectedItem(-1);
                        txtCostoProd.setValue(0);
                        txtPrecioProd.setValue(0);
                        nuevoProducto.setVisible(false);
                        this.setEnabled(true);
                        service.llenarProductos();
                        service.llenarInventario();
                        JOptionPane.showMessageDialog(this, "Producto insertado", null, JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al insertar producto", null, JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (Excepcion | HeadlessException ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAceptarNuevoProdActionPerformed

    /**
     * Evento al hacer click en el botÃ³n aceptar pagos
     *
     * @param evt
     */
    private void btnAceptarPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarPagosActionPerformed
        String nombreCliente = txtClientePagos.getText();
        float total = Float.parseFloat(txtAbono.getValue().toString());
        Date fechaPago = fechaPagos.getDate();
        StringBuilder builder = new StringBuilder();
        if (nombreCliente.isEmpty()) {
            builder.append("No se ha seleccionado cliente\n");
        }
        if (total == 0) {
            builder.append("No se ha insertado cantidad\n");
        }
        if (builder.length() != 0) {
            JOptionPane.showMessageDialog(this, builder, "Error", 0);
        } else {
            int opcion = JOptionPane.showConfirmDialog(this, "Desea abonar al " + nombreCliente + " la cantidad de $" + total + "", "Aceptar pago",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opcion == JOptionPane.YES_OPTION) {
                try {
                    Cliente cliente = new Cliente();
                    cliente.RecuperarCliente(nombreCliente);
                    Pago pago = new Pago(cliente, (int) total, fechaPago);
                    if (pago.InsertarPago()) {
                        cliente.ActualizarAcumulado((int) -total);
                        //txtClientePagos.setText(null);
                        txtAbono.setValue(0);
                        fechaPagos.setDate(new Date());
                        txtClienteHistorial.setText(nombreCliente);
                        llenarHistorial(nombreCliente);
                        llenarClientes();
                        service.llenarInventario();
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al insertar pago", null, JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Excepcion | HeadlessException ex) {
                    LOGGER.error(ex.getMessage());
                    JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnAceptarPagosActionPerformed

    /**
     * Evento al hacer click en un producto de la tabla devoluciones
     *
     * @param evt
     */
    private void tbDevolucionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDevolucionesMouseClicked
        if (evt.getClickCount() == 2) {
            String nombreCliente = txtClienteDevoluciones.getText();
            int fila = tbDevoluciones.getSelectedRow();
            int cantidad = Integer.parseInt(tbDevoluciones.getValueAt(fila, 0).toString());
            String producto = tbDevoluciones.getValueAt(fila, 1).toString();
            float total = Float.parseFloat(tbDevoluciones.getValueAt(fila, 2).toString());
            int numVenta = Integer.parseInt(tbDevoluciones.getModel().getValueAt(fila, 4).toString());
            int claveProd = Integer.parseInt(tbDevoluciones.getModel().getValueAt(fila, 5).toString());
            Devolucion devolucion = new Devolucion(nombreCliente, cantidad, producto, numVenta, claveProd, (int) total);
            try {
                if (service.hacerDevolucion(devolucion)) {
                    llenarHistorial(nombreCliente);
                    llenarClientes();
                    llenarDevolucion(nombreCliente);
                    service.llenarInventario();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al hacer devolución", null, JOptionPane.ERROR_MESSAGE);
                }
            } catch (Excepcion | HeadlessException ex) {
                LOGGER.error(ex.getMessage());
                JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tbDevolucionesMouseClicked

    /**
     * Evento al hacer click en el botón Acerca de
     *
     * @param evt
     */
    private void mAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAcercaActionPerformed
        StringBuilder msg = new StringBuilder("Héctor López  V 3.0 (20-05-18)\n");
        msg.append("Se agregan categorías de productos-\n");
        JOptionPane.showMessageDialog(this, msg, "Acerca de", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mAcercaActionPerformed
    String descripcionProdOld = "";
    private void tbInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbInventarioMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                nuevoProducto.getContentPane().add(panNuevoProducto);
                nuevoProducto.pack();
                nuevoProducto.setLocationRelativeTo(this);
                descripcionProdOld = tbInventario.getValueAt(tbInventario.getSelectedRow(), 0).toString();
                txtDescripcionProd.setText(descripcionProdOld);
//            txtDescripcionProd.setEditable(false);
                if (Integer.parseInt(tbInventario.getValueAt(tbInventario.getSelectedRow(), 1).toString()) >= 0) {
                    jcCantidadProd.setSelectedIndex(Integer.parseInt(tbInventario.getValueAt(tbInventario.getSelectedRow(), 1).toString()));
                } else {
                    jcCantidadProd.setSelectedIndex(0);
                }
                txtCostoProd.setValue(Float.parseFloat(tbInventario.getValueAt(tbInventario.getSelectedRow(), 2).toString()));
                txtPrecioProd.setValue(Float.parseFloat(tbInventario.getValueAt(tbInventario.getSelectedRow(), 3).toString()));
                editProducto = true;
                service.llenarCategorias(this.cbCategoria, false);
                Producto producto = new Producto();
                producto.RecuperarProducto(descripcionProdOld);
                Categoria categoria;
                categoria = new Categoria(producto.getCategoria());
                this.cbCategoria.setSelectedItem(categoria.getDescripcion());
                nuevoProducto.setVisible(true);
            } catch (Excepcion ex) {
                Logger.getLogger(Inventario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tbInventarioMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        mRespaldoActionPerformed(null);
        LOGGER.info(Constantes.CERRANDO_APLICACION);
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void mFechaCorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFechaCorteActionPerformed
        try {
            service.seleccionarFechaContable();
            lblFechaCorte.setText("desde: " + service.getFechaCorte());
            service.llenarInventario();
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mFechaCorteActionPerformed

    private void mRespaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRespaldoActionPerformed
        LOGGER.info(Constantes.RESPALDO);
        String[] tablas = new String[]{"CLIENTES", "DETALLEVENTAS", "PAGOS", "PRODUCTOS", "VENTAS", "CATEGORIA"};
        try {
            for (String tabla : tablas) {
                service.respaldarTabla(tabla);
            }
        } catch (IOException | Excepcion | SQLException ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mRespaldoActionPerformed

    private void mNuevaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mNuevaCategoriaActionPerformed
        try {
            String txtCategoria = JOptionPane.showInputDialog("Nueva categoría");
            Categoria categoria = new Categoria(txtCategoria);
            if (null == categoria.getId()) {
                categoria.insertarCategoria();
                
                service.llenarCategorias(this.cbCategoriaProducto, true);
            } else {
                JOptionPane.showMessageDialog(this, "Esta categoría ya existe", null, JOptionPane.ERROR_MESSAGE);
            }
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_mNuevaCategoriaActionPerformed

    private void btnBuscarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCategoriaActionPerformed
        try {
            service.llenarInventario();
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarCategoriaActionPerformed

    /**
     * Limpia la tabla ventas
     */
    public void BorrarVentas() {
        this.txtClienteVentas.setText(null);
        this.fechaVentas.setDate(new java.util.Date());
        this.txtTotal.setValue(0);
        for (int f = 0; f < tbVenta.getRowCount(); f++) {
            for (int c = 0; c < 4; c++) {
                this.tbVenta.setValueAt(null, f, c);
            }
        }
        txtAjuste.setValue(0);
    }

    /**
     * Calcula el total de la venta
     */
    public void CalcularVenta() {
        BigDecimal gtotal = BigDecimal.ZERO;
        int cantidad;
        BigDecimal total;
        BigDecimal ajuste = new BigDecimal(txtAjuste.getValue().toString());
        for (int i = 0; i < tbVenta.getRowCount(); i++) {
            if ((this.tbVenta.getValueAt(i, 0) != null) && (tbVenta.getValueAt(i, 1) != null)) {
                try {
                    cantidad = Integer.parseInt(tbVenta.getValueAt(i, 0).toString());
                    String prod = tbVenta.getValueAt(i, 1).toString();
                    Producto producto = new Producto();
                    producto.RecuperarProducto(prod);
                    tbVenta.setValueAt(producto.getPrecioUnitario(), i, 2);
                    total = new BigDecimal(cantidad).multiply(producto.getPrecioUnitario());
                    gtotal = gtotal.add(total);
                    this.tbVenta.setValueAt(total, i, 3);
                } catch (Excepcion ex) {
                    LOGGER.error(ex.getMessage());
                    JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        this.txtTotal.setValue(gtotal.add(ajuste).setScale(2));
    }

    /**
     * Llena la tabla clientes
     */
    private void llenarClientes() {
        DefaultTableModel dm = (DefaultTableModel) this.tbClientes.getModel();
        int rowCount = dm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        try {
            new Cliente().RecuperarCliente(dm);
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Llena el historial del cliente
     *
     * @param nombreCliente
     */
    public void llenarHistorial(String nombreCliente) {
        try {
            Cliente cliente = new Cliente();
            cliente.RecuperarCliente(nombreCliente);
            DefaultTableModel dm = (DefaultTableModel) this.tbHistorial.getModel();
            int rowCount = dm.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            cliente.ObtenerHistorial(dm);
            txtTotalCliente.setValue(cliente.getAcumuladoCliente());
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Llena la tabla devoluciÃ³n
     *
     * @param nombreCliente
     */
    public void llenarDevolucion(String nombreCliente) {
        try {
            Cliente cliente = new Cliente();
            cliente.RecuperarCliente(nombreCliente);
            DefaultTableModel dm = (DefaultTableModel) this.tbDevoluciones.getModel();
            int rowCount = dm.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            cliente.ObtenerHistorialDevolucion(dm);
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventario.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Inventario(task).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton btnAceptarNuevoCliente;
    private javax.swing.JButton btnAceptarNuevoProd;
    private javax.swing.JButton btnAceptarPagos;
    private javax.swing.JButton btnAceptarVenta;
    private javax.swing.JButton btnBorrarVenta;
    private javax.swing.JButton btnBuscarCategoria;
    private javax.swing.JButton btnBuscarDevoluciones;
    private javax.swing.JButton btnBuscarHistorial;
    private javax.swing.JButton btnBuscarPagos;
    private javax.swing.JButton btnBuscarVentas;
    private javax.swing.JComboBox<String> cbCategoria;
    private javax.swing.JComboBox<String> cbCategoriaProducto;
    private com.toedter.calendar.JDateChooser fechaPagos;
    private com.toedter.calendar.JDateChooser fechaVentas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcCantidadProd;
    private javax.swing.JLabel lblAbono;
    private javax.swing.JLabel lblAjuste;
    private javax.swing.JLabel lblCantidadProd;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblClienteDevoluciones;
    private javax.swing.JLabel lblClienteHistorial;
    private javax.swing.JLabel lblClientePagos;
    private javax.swing.JLabel lblClienteVentas;
    private javax.swing.JLabel lblCostoProd;
    private javax.swing.JLabel lblDescripcionProd;
    private javax.swing.JLabel lblFechaCorte;
    private javax.swing.JLabel lblFechaPagos;
    private javax.swing.JLabel lblFechaVentas;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblPrecioProd;
    private javax.swing.JLabel lblSaldoCliente;
    private javax.swing.JLabel lblSaldoNuevo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalDeudas;
    private javax.swing.JLabel lblTotalVentas;
    private javax.swing.JList<String> listaClientes;
    private javax.swing.JMenuItem mAcerca;
    private javax.swing.JMenuItem mBorrarCliente;
    private javax.swing.JMenuItem mEditarCliente;
    private javax.swing.JMenuItem mFechaCorte;
    private javax.swing.JMenuItem mNuevaCategoria;
    private javax.swing.JMenuItem mNuevoCliente;
    private javax.swing.JMenuItem mNuevoProducto;
    private javax.swing.JMenuItem mRespaldo;
    private javax.swing.JMenuItem mSalir;
    private javax.swing.JMenu menuAjustes;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JPanel panBuscarCliente;
    private javax.swing.JPanel panClientes;
    private javax.swing.JPanel panDevoluciones;
    private javax.swing.JPanel panHistorial;
    private javax.swing.JPanel panNuevoCliente;
    private javax.swing.JPanel panNuevoProducto;
    private javax.swing.JPanel panPagos;
    private javax.swing.JTabbedPane panPestañas;
    private javax.swing.JPanel panProductos;
    private javax.swing.JPanel panVentas;
    private javax.swing.JScrollPane scrollTablaClientes;
    private javax.swing.JScrollPane scrollTablaHistorial;
    private javax.swing.JScrollPane scrollTablaHistorial1;
    private javax.swing.JScrollPane scrollTablaInventario;
    private javax.swing.JScrollPane scrollTablaVentas;
    private javax.swing.JTable tbClientes;
    private javax.swing.JTable tbDevoluciones;
    private javax.swing.JTable tbHistorial;
    private javax.swing.JTable tbInventario;
    private javax.swing.JTable tbVenta;
    private javax.swing.JFormattedTextField txtAbono;
    private javax.swing.JFormattedTextField txtAjuste;
    private javax.swing.JTextField txtClienteDevoluciones;
    private javax.swing.JTextField txtClienteHistorial;
    private javax.swing.JTextField txtClientePagos;
    private javax.swing.JTextField txtClienteVentas;
    private javax.swing.JFormattedTextField txtCostoProd;
    private javax.swing.JTextField txtDescripcionProd;
    private javax.swing.JTextField txtNuevoCliente;
    private javax.swing.JFormattedTextField txtPrecioProd;
    private javax.swing.JFormattedTextField txtSaldoNuevo;
    private javax.swing.JFormattedTextField txtTotal;
    private javax.swing.JFormattedTextField txtTotalCliente;
    private javax.swing.JFormattedTextField txtTotalDeudas;
    private javax.swing.JFormattedTextField txtTotalInventario;
    private javax.swing.JFormattedTextField txtTotalVentas;
    // End of variables declaration//GEN-END:variables

    public void iniciar() {
        try {
            service.llenarCategorias(this.cbCategoriaProducto, true);
            service.llenarInventario();
            service.llenarClientes();
            buscarCliente.add(panBuscarCliente);
            buscarCliente.pack();
            buscarCliente.setLocationRelativeTo(Inventario.this);
        } catch (Excepcion ex) {
            LOGGER.error(ex.getMessage());
            JOptionPane.showMessageDialog(Inventario.this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
